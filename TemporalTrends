// ------------------------- UTILITY FUNCTIONS --------------------------------

// Append a tag to band names of an image
// Used to tag seasonal composites with a id tag
// inputs: image, string
// returns: image
function appendSeasonTag(im, tag) {
  var bands = im.bandNames();
  var tagged = bands.map(function(n) {
    return ee.String(n).cat('_').cat(tag);
  });
  return im.select(bands, tagged);
}

// Compute a season's composites (mean, max, min, max-min) in a year.
// Given a image collection for a year, split it into a 3 month season based on given mid month
// Compute composites and add a season id tag to the bands
// inputs: image collection (containing 1 year's images), season's mid month (ee.Date), string
// returns: image

function seasonalComposites(coll, seasonMidMonth, seasonTag) {
  var season = coll.filter(ee.Filter.date(seasonMidMonth.advance(-1, 'month'),
                                          seasonMidMonth.advance(+1, 'month')));
  var season_mean = appendSeasonTag(season.reduce(ee.Reducer.mean()), seasonTag);
  var season_max  = appendSeasonTag(season.reduce(ee.Reducer.max()),  seasonTag);
  var season_min  = appendSeasonTag(season.reduce(ee.Reducer.min()),  seasonTag);
  var season_maxMinusMin = appendSeasonTag(season.max().subtract(season.min()),
                                           'maxMinusMin_'+seasonTag);
  return ee.Image.cat(season_mean, season_max, season_min, season_maxMinusMin);
}

// Compute composites of all seasons, for each year in a list on the image collection
// Computed season by season, with each band-season as a separate band
// input: list of years, collection
// return: image collection
function yearlyComposites(years, coll) {
  return ee.ImageCollection.fromImages(years.map(function(y) {
    var djf_comps = seasonalComposites(coll, ee.Date.fromYMD(y, 1, 1), 'djf');
    var mam_comps = seasonalComposites(coll, ee.Date.fromYMD(y, 4, 1), 'mam');
    var jja_comps = seasonalComposites(coll, ee.Date.fromYMD(y, 7, 1), 'jja');
    var son_comps = seasonalComposites(coll, ee.Date.fromYMD(y, 10, 1), 'son');
    var ond_comps = seasonalComposites(coll, ee.Date.fromYMD(y, 11, 1), 'ond');
    
    // annual composites
    var yDate = ee.Date.fromYMD(y, 1, 1);
    var annual = coll.filter(ee.Filter.date(yDate, yDate.advance(1, 'year')));
    var annual_mean = appendSeasonTag(annual.reduce(ee.Reducer.mean()), 'annual');
    var annual_max  = appendSeasonTag(annual.reduce(ee.Reducer.max()),  'annual');
    var annual_min  = appendSeasonTag(annual.reduce(ee.Reducer.min()),  'annual');
    var annual_maxMinusMin = appendSeasonTag(annual.max().subtract(annual.min()),
                                             'maxMinusMin_'+'annual');
    var annual_comps = ee.Image.cat(annual_mean, annual_max, annual_min, annual_maxMinusMin);
    
    return ee.Image.cat(djf_comps, mam_comps, jja_comps, son_comps, ond_comps, annual_comps)
             .set('system:time_start', ee.Date.fromYMD(y, 1, 1).millis(),
                  'year', y);
  }));
}

// Find list of years the collection has data for
// input: collection
// output: list
function extractYears(coll) {
  return ee.List(coll.aggregate_array('system:time_start'))
    .map(function(t) {return ee.Date(t).get('year')})
    .distinct();
}

// (Pre-)Append a constant and time band to an image
// Mapping this over an image collection prepares it for linear regression vs. time
// input: image
// output: image
function appendConstNTimeBands(im) {
    return ee.Image(1)
             .float() // to keep band data types consistent
             .addBands(im.metadata('system:time_start').divide(1e15)
                         .float() // to keep band data types consistent
                         .rename('time'))
             .addBands(im)
             .copyProperties(im, ['system:time_start', 'year']);
}

// Calculate daily means of all bands of images in a collection.
// Sets a image property with number of bands -- can subsequently 
// be used to filter out images with no data.
// Used for data available at frequency greater than monthly 
// input: image collection, list of years
// output: image collection
function dailyAggregate(coll, years) {
  return ee.ImageCollection.fromImages(ee.List(years).map(function(y) {
    var yDate = ee.Date.fromYMD(y, 1, 1);
    // find number of days in year y
    var yNumDays = yDate.advance(1, 'year').difference(yDate, 'day');
    // aggregate for each day of year
    return ee.List.sequence({start: 0, count: yNumDays})
      .map(function(doy) {
        var doyDate = yDate.advance(doy, 'day');
        var doyAggr = coll.filterDate(doyDate, doyDate.advance(1, 'day'))
                          .mean();
        return doyAggr.set('system:time_start', doyDate.millis(),
                            'date', doyDate.format('YYYY-MM-dd'),
                            'numBands', doyAggr.bandNames().length());
      });
  }).flatten())
  .filter(ee.Filter.neq('numBands', 0)); // drop days with no data
}

// ------------------------- PROCESSING -------------------------------------

// Find Uganda boundary and add buffer
var uganda = ee.FeatureCollection('USDOS/LSIB_SIMPLE/2017')
  .filter(ee.Filter.eq('country_co', 'UG'))
  .aside(Map.addLayer)
  .first();
var ugandaBuffered = ee.Feature(uganda).buffer(3e5); // 300km buffer

/////////////////// FLDAS ////////////////////////

// Get relevant FLDAS data
// More info:https://developers.google.com/earth-engine/datasets/catalog/NASA_FLDAS_NOAH01_C_GL_M_V001
var fldas = ee.ImageCollection('NASA/FLDAS/NOAH01/C/GL/M/V001')
  .filter(ee.Filter.date('1982-01-01', '2018-12-31')) // 2019 is not yet complete
  // Select soil surface moisture, surface runoff, 
  // surface radiative temperature, near surface air temperature
  .select(['SoilMoi00_10cm_tavg', 'Qs_tavg', 'RadT_tavg', 'Tair_f_tavg', 'Rainf_f_tavg']);

var fldasCRS = ee.Image(fldas.first()).projection().crs().getInfo();
var fldasScl = ee.Image(fldas.first()).projection().nominalScale().getInfo();

// Years for which data are available
var fldasYears = extractYears(fldas);

// Create time series of composites
var fldasTimeSeries = yearlyComposites(fldasYears, fldas)
  // add a constant and time band, in preparation of regression
  .map(appendConstNTimeBands);

var fldasPredVars = ee.Image(fldasTimeSeries.first()).bandNames()
  .slice(0, 2); // constant, time are predictor vars
var fldasRespVars = ee.Image(fldasTimeSeries.first()).bandNames()
  .slice(2);    // rest all are response vars

// Perform regression. All response variables handled at once.
var fldasRegr = fldasTimeSeries
  .reduce(ee.Reducer.linearRegression(fldasPredVars.size(), fldasRespVars.size()));

// Regression result (coefficients) is array image that must be flattened.
// These lists label the information along each axis of the arrays.
// From eg. at https://developers.google.com/earth-engine/reducers_regression
var fldasRegrResBandNames = [fldasPredVars,  // 0-axis variation.
                             fldasRespVars]; // 1-axis variation.

// Flatten the array images to get all coefficients as bands,
// in a multi-band image according to the labels
// "time_*" bands are the slopes of the regression
// "constant_* bands are offsets of the regression
var fldasRegrCoeffs = fldasRegr.select(['coefficients']).arrayFlatten(fldasRegrResBandNames)
  .aside(print, 'fldas regression output flattened');

// // Displaying a coefficient image
// var visParam = {"opacity":1,"bands":["time_SoilMoi00_10cm_tavg_mean_djf"], palette: ['red', 'grey', 'blue'],
//   "min":-54.47085296630859,"max":54};
// Map.addLayer(fldasRegrCoeffs.select('time_SoilMoi00_10cm_tavg_mean_djf').clip(ugandaBuffered),
//   visParam, 'time_SoilMoi00_10cm_tavg_mean_djf');
// Map.centerObject(ugandaBuffered);

// Export to drive
Export.image.toDrive({
  image: fldasRegrCoeffs.clip(ugandaBuffered),
  description: 'UgandaFldasRegr',
  fileNamePrefix: 'UgandaFldasRegr',
  region: ugandaBuffered.bounds(), 
  scale: fldasScl,
  crs: fldasCRS
});

////////////// Terra Climate ///////////////////

var terraClim = ee.ImageCollection('IDAHO_EPSCOR/TERRACLIMATE')
  .filter(ee.Filter.date('1979-01-01', '2018-12-31')) // 2018 not available
  .select(['aet', 'def', 'pdsi', 'pet', 'pr', 'ro', 'soil', 'tmmn', 'tmmx']);

var terraClimCRS = ee.Image(terraClim.first()).projection().crs().getInfo();
var terraClimScl = ee.Image(terraClim.first()).projection().nominalScale().getInfo();

// Years for which data are available
var terraClimYears = extractYears(terraClim);

// time series of composites
var terraClimTimeSeries = yearlyComposites(terraClimYears, terraClim)
  .map(appendConstNTimeBands);

var terraClimPredVars = ee.Image(terraClimTimeSeries.first()).bandNames()
  .slice(0, 2); // constant, time are predictor vars
var terraClimRespVars = ee.Image(terraClimTimeSeries.first()).bandNames()
  .slice(2);    // rest all are response vars

// Perform regression. All response variables handled at once.
var terraClimRegr = terraClimTimeSeries
  .reduce(ee.Reducer.linearRegression(terraClimPredVars.size(), terraClimRespVars.size()));

// Flatten regression result (coefficients) array image - band names
var terraClimRegrResBandNames = [terraClimPredVars,  // 0-axis variation.
                                 terraClimRespVars]; // 1-axis variation.

// Flatten the array images to get all coefficients as bands,
// in a multi-band image according to the labels
// "time_*" bands are the slopes of the regression
// "constant_* bands are offsets of the regression
var terraClimRegrCoeffs = terraClimRegr.select(['coefficients']).arrayFlatten(terraClimRegrResBandNames)
  .aside(print, 'terraClimregression output flattened');

// Export to drive
Export.image.toDrive({
  image: terraClimRegrCoeffs.clip(ugandaBuffered),
  description: 'UgandaTerraClimRegr',
  fileNamePrefix: 'UgandaTerraClimRegr',
  region: ugandaBuffered.bounds(), 
  scale: terraClimScl,
  crs: terraClimCRS
});

//////////////// GLDAS 2.1 ///////////////////////

var gldas = ee.ImageCollection('NASA/GLDAS/V021/NOAH/G025/T3H')
  .filter(ee.Filter.date('2000-01-01', '2018-12-31'))
  .select(['AvgSurfT_inst', 'Evap_tavg', 'PotEvap_tavg', 'Qs_acc', 'Qsb_acc', 
          'Rainf_f_tavg', 'RootMoist_inst', 'SoilMoi0_10cm_inst', 'Tveg_tavg']);
var gldasCRS = ee.Image(gldas.first()).projection().crs().getInfo();
var gldasScl = ee.Image(gldas.first()).projection().nominalScale().getInfo();

// Years for which data are available
var gldasYears = extractYears(gldas);

var gldasDaily = dailyAggregate(gldas, gldasYears);

// time series of composites
var gldasTimeSeries = yearlyComposites(gldasYears, gldasDaily)
  .map(appendConstNTimeBands);

var gldasPredVars = ee.Image(gldasTimeSeries.first()).bandNames()
  .slice(0, 2); // constant, time are predictor vars
var gldasRespVars = ee.Image(gldasTimeSeries.first()).bandNames()
  .slice(2);    // rest all are response vars

// Perform regression. All response variables handled at once.
var gldasRegr = gldasTimeSeries
  .reduce(ee.Reducer.linearRegression(gldasPredVars.size(), gldasRespVars.size()));

// Flatten regression result (coefficients) array image - band names
var gldasRegrResBandNames = [gldasPredVars,  // 0-axis variation.
                             gldasRespVars]; // 1-axis variation.

// Flatten the array images to get all coefficients as bands,
// in a multi-band image according to the labels
// "time_*" bands are the slopes of the regression
// "constant_* bands are offsets of the regression
var gldasRegrCoeffs = gldasRegr.select(['coefficients']).arrayFlatten(gldasRegrResBandNames)
  .aside(print, 'gldas regression output flattened');

// Export to drive
Export.image.toDrive({
  image: gldasRegrCoeffs.clip(ugandaBuffered),
  description: 'UgandaGldasRegr',
  fileNamePrefix: 'UgandaGldasRegr',
  region: ugandaBuffered.bounds(), 
  scale: gldasScl,
  crs: gldasCRS
});

////////////// Ocean Color SMI ///////////////////

var oceanSmi = ee.ImageCollection('NASA/OCEANDATA/MODIS-Aqua/L3SMI')
  .filter(ee.Filter.date('2003-01-01', '2018-12-31')) // the 16 full years data is available for
  .select(['chlor_a', 'poc']); // sst not available

var oceanSmiCRS = ee.Image(oceanSmi.first()).projection().crs().getInfo();
var oceanSmiScl = ee.Image(oceanSmi.first()).projection().nominalScale().getInfo();

// Years for which data are available
var oceanSmiYears = extractYears(oceanSmi);

var oceanSmiDaily = dailyAggregate(oceanSmi, oceanSmiYears);

// time series of composites
var oceanSmiTimeSeries = yearlyComposites(oceanSmiYears, oceanSmiDaily)
  .map(appendConstNTimeBands);

var oceanSmiPredVars = ee.Image(oceanSmiTimeSeries.first()).bandNames()
  .slice(0, 2); // constant, time are predictor vars
var oceanSmiRespVars = ee.Image(oceanSmiTimeSeries.first()).bandNames()
  .slice(2);    // rest all are response vars

// Perform regression. All response variables handled at once.
var oceanSmiRegr = oceanSmiTimeSeries
  .reduce(ee.Reducer.linearRegression(oceanSmiPredVars.size(), oceanSmiRespVars.size()));

// Flatten regression result (coefficients) array image - band names
var oceanSmiRegrResBandNames = [oceanSmiPredVars,  // 0-axis variation.
                                oceanSmiRespVars]; // 1-axis variation.

// Flatten the array images to get all coefficients as bands,
// in a multi-band image according to the labels
// "time_*" bands are the slopes of the regression
// "constant_* bands are offsets of the regression
var oceanSmiRegrCoeffs = oceanSmiRegr.select(['coefficients']).arrayFlatten(oceanSmiRegrResBandNames)
  .aside(print, 'oceanSmi regression output flattened');

// Export to drive
Export.image.toDrive({
  image: oceanSmiRegrCoeffs.clip(ugandaBuffered),
  description: 'UgandaOceanSMIRegr',
  fileNamePrefix: 'UgandaOceanSMIRegr',
  region: ugandaBuffered.bounds(), 
  scale: oceanSmiScl,
  crs: oceanSmiCRS
});

/////////////////// CHIRPS /////////////////////////

var chirps = ee.ImageCollection('UCSB-CHG/CHIRPS/DAILY')
  .filter(ee.Filter.date('1981-01-01', '2018-12-31'))
  .select(['precipitation'], ['precip']); // rename band to a shorter name

var chirpsCRS = ee.Image(chirps.first()).projection().crs().getInfo();
var chirpsScl = ee.Image(chirps.first()).projection().nominalScale().getInfo();

// Years for which data are available
var chirpsYears = extractYears(chirps);

// time series of composites
var chirpsTimeSeries = yearlyComposites(chirpsYears, chirps)
  .map(appendConstNTimeBands);

var chirpsPredVars = ee.Image(chirpsTimeSeries.first()).bandNames()
  .slice(0, 2); // constant, time are predictor vars
var chirpsRespVars = ee.Image(chirpsTimeSeries.first()).bandNames()
  .slice(2);    // rest all are response vars

// Perform regression. All response variables handled at once.
var chirpsRegr = chirpsTimeSeries
  .reduce(ee.Reducer.linearRegression(chirpsPredVars.size(), chirpsRespVars.size()));

// Flatten regression result (coefficients) array image - band names
var chirpsRegrResBandNames = [chirpsPredVars,  // 0-axis variation.
                              chirpsRespVars]; // 1-axis variation.

// Flatten the array images to get all coefficients as bands,
// in a multi-band image according to the labels
// "time_*" bands are the slopes of the regression
// "constant_* bands are offsets of the regression
var chirpsRegrCoeffs = chirpsRegr.select(['coefficients']).arrayFlatten(chirpsRegrResBandNames)
  .aside(print, 'chirps regression output flattened');

// Export to drive
Export.image.toDrive({
  image: chirpsRegrCoeffs.clip(ugandaBuffered),
  description: 'UgandaChirpsRegr',
  fileNamePrefix: 'UgandaChirpsRegr',
  region: ugandaBuffered.bounds(), 
  scale: chirpsScl,
  crs: chirpsCRS
});
